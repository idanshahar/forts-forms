{
  "triggers": [
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-NEW-ITEM-INSTANCE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-NEW-ITEM-INSTANCE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-CHECKBOX-CHANGED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "PRE-TEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-NEW-ITEM-INSTANCE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-DUP-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-NEW-ITEM-INSTANCE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "ON-POPULATE-DETAILS",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "ON-CHECK-DELETE-MASTER",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "POST-QUERY",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "PRE-QUERY",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "PRE-INSERT",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "PRE-UPDATE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NXTBLK",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-NEW-BLOCK-INSTANCE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "PRE-TEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-NEW-ITEM-INSTANCE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-NEXT-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-UP",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-DOWN",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "PRE-INSERT",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "POST-QUERY",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "PRE-UPDATE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-NEW-BLOCK-INSTANCE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-DELREC",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "POST-QUERY",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-UP",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-DOWN",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-NEW-RECORD-INSTANCE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-BUTTON-PRESSED",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-VALIDATE-ITEM",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-LISTVAL",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "POST-QUERY",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "PRE-INSERT",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "PRE-UPDATE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-EXIT",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-CLRBLK",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "ON-CLEAR-DETAILS",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-NEW-FORM-INSTANCE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-EXEQRY",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY_COMMIT",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-COMMIT",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "WHEN-NEW-ITEM-INSTANCE",
      "code": "[PL/SQL removed for processing]"
    },
    {
      "name": "KEY-F0",
      "code": "[PL/SQL removed for processing]"
    }
  ],
  "program_units": [
    {
      "name": "L_GET_CLIENT_INFO",
      "type": "Procedure",
      "code": "Procedure L_GET_CLIENT_INFO (IN_CLIENT     IN     number, \n                             NAME          IN OUT VARCHAR2, \n                             ERR_HANDLING  IN     VARCHAR2 ) is\nERR_HAND VARCHAR2(1);\n\nCursor GET_CLIENT is \n   select c_name\n   from CLIENT c,--- USER_CLIENT uc,\n    all_PERSONAL p\n   ---where (c.client_no in (select c2.client_no\n                       --  from CLIENT c2\n                      ---   where c_area = uc_area\n                       --  and (c_center_no = uc_center_no or uc_center_no is null)\n                       --  and (c2.client_no = uc.client_no or uc.client_no is null))) --or \n       --  (:patient_file.query = 'Y' and :patient_file.client_no = :client_special))\n  --- and uc.emp_no = p.emp_no                           \n   where  p.p_username = :ctrl.username  \n   and c.client_no = IN_CLIENT\n   and c_type = 81\n   and c_status = '�'\n   and exists (select '1' from CODES\n               where tab_no = 42\n               and code is not null\n               and code = c_direct_code\n               and hard_code_yn is not null);\n   \n----------------------\nBegin\n  If IN_CLIENT is null then\n    NAME  :=  '';\n  Else\n    Open GET_CLIENT;\n    Fetch GET_CLIENT into NAME ;\n    if (GET_CLIENT%NOTFOUND) then\n    \tERR_HAND  :=  lower(substr(ERR_HANDLING, 1, 1));\n      errors(93, ERR_HAND);\n    end if;\n    Close GET_CLIENT;\n  End if;\nEnd;\n"
    },
    {
      "name": "CHECK_PACKAGE_FAILURE",
      "type": "Procedure",
      "code": "Procedure Check_Package_Failure IS\nBEGIN\n  IF NOT ( Form_Success ) THEN\n    RAISE Form_Trigger_Failure;\n  END IF;\nEND;"
    },
    {
      "name": "QUERY_MASTER_DETAILS",
      "type": "Procedure",
      "code": "PROCEDURE Query_Master_Details(rel_id Relation,detail VARCHAR2) IS\n  oldmsg VARCHAR2(2);  -- Old Message Level Setting\n  reldef VARCHAR2(5);  -- Relation Deferred Setting\nBEGIN\n  --\n  -- Initialize Local Variable(s)\n  --\n  reldef := Get_Relation_Property(rel_id, DEFERRED_COORDINATION);\n  oldmsg := :System.Message_Level;\n  --\n  -- If NOT Deferred, Goto detail and execute the query.\n  --\n  IF reldef = 'FALSE' THEN\n    Go_Block(detail);\n    Check_Package_Failure;\n    :System.Message_Level := '10';\n    Execute_Query;\n    :System.Message_Level := oldmsg;\n  ELSE\n    --\n    -- Relation is deferred, mark the detail block as un-coordinated\n    --\n    Set_Block_Property(detail, COORDINATION_STATUS, NON_COORDINATED);\n  END IF;\n\nEXCEPTION\n    WHEN Form_Trigger_Failure THEN\n      :System.Message_Level := oldmsg;\n      RAISE;\nEND Query_Master_Details;\n"
    },
    {
      "name": "LO_CHECK_ID_NO",
      "type": "Procedure",
      "code": "Procedure LO_CHECK_ID_NO  (IN_ID  in out number, \n                           IN_ERR in char) is\n  L_RET number;\nBegin\n  :dummy_N := -1;\n  L_RET := asf_sifrat_bikoret(IN_ID,:dummy_N);\n  if L_RET < 0 then\n    errors(2064,IN_ERR);\n  end if;\nEnd;"
    },
    {
      "name": "CHECK_PERS_ACTIVITY",
      "type": "Procedure",
      "code": "PROCEDURE CHECK_PERS_ACTIVITY (IN_EMP_NO    IN  number,\n                               IN_ACTIVITY  IN varchar2,\n                               OUT_ANSWER   IN OUT BOOLEAN )IS\n   cursor C1 is\n   select activity_code\n   from PERS_ACTIVITY\n   where emp_no = IN_EMP_NO;\n   p_act_code    varchar2(20);\nBEGIN\n  OUT_ANSWER := FALSE;\n  open C1;\n  Loop\n    Fetch C1 into p_act_code;\n    if C1%ROWCOUNT = 0 then\n      OUT_ANSWER := TRUE;\n    end if;\n    if C1%NOTFOUND then\n      exit;\n    elsif p_act_code = IN_ACTIVITY then\n      OUT_ANSWER := TRUE;\n    end if;\n  End Loop;\n  close C1;\nEND;"
    },
    {
      "name": "START_FORM",
      "type": "Procedure",
      "code": "PROCEDURE start_form IS\n  p_name varchar2(80);\n  cursor C1  is\n  select param_value\n  from SPECIAL_PARAMS\n  where upper(param_name) = p_name;\n  cursor C2 is\n    select '1'\n  from CODES\n  where tab_no = 172\n  and code = :booking.b_id_type;\n        check_val   varchar2(20);\nBEGIN\n\t\n\tINIT_RG_CODES (172, 'booking.b_id_type');\n\n\n  open C1;\n  Fetch C1 into :booking.b_id_type;\n  close C1;\n  if  :booking.b_id_type is not null then\n    open C2;\n    Fetch C2 into check_val;\n    if C2%NOTFOUND then\n    \t :booking.b_id_type := null;\n    end if;\n    close C2;\n  end if;\n\nEND;"
    },
    {
      "name": "LO_ALERT_A_MAXQUT",
      "type": "Procedure",
      "code": "PROCEDURE lo_alert_a_maxqut IS\n button number;\n mess varchar2(1000);\nbegin\n    mess := '���� ������ �� ������ ������ ���� �������, ��� ������?';\n    set_alert_property('AL_NOTE_2',alert_message_text,mess);\n    button:=show_alert('AL_NOTE_2');\n    if button=alert_button2 then\n    \t:booking_activity.ba_qut := 1;\n      raise form_trigger_failure;\n    end if;\nend;"
    },
    {
      "name": "LO_UPDATE_USEDTIME",
      "type": "Procedure",
      "code": "PROCEDURE lo_update_usedtime IS\nl_block_no number;\nBEGIN\n  select a.m_block_no\n  into l_block_no\n  from meetings a\n  where a.m_isblock =0\n  and a.meeting_no = :parameter.pr_meeting_no\n  and exists(select 1 from meetings b \n                      where b.m_isblock = 8  \n                       and b.m_block_no =0 \n                       and b.meeting_no =a.meeting_no);\n                       \n                       \n  if l_block_no is not null then \n                         \n  update meetings\n  set m_usedtime = (select sum(m_duration) from meetings where m_block_no = l_block_no)\n  where meeting_no =l_block_no\n  and m_isblock = 8  and m_block_no =0;\n  \n  end if;\n                        \n   \nEND;"
    },
    {
      "name": "LO_SESSION",
      "type": "Function",
      "code": "FUNCTION LO_SESSION RETURN NUMBER IS\n L_SESH VARCHAR2(20);\nBEGIN\n   SELECT USERENV('SESSIONID')\n   INTO   L_SESH \n   FROM   DUAL;\n   --message(l_sesh ||  'this is the session'); message(l_sesh ||  'this is the session');\n  RETURN(TO_NUMBER(L_SESH));  \nEND;\n\n"
    },
    {
      "name": "LO_GET_PARAMS",
      "type": "Procedure",
      "code": "PROCEDURE lo_get_params IS\nv_parameter varchar2(30);\ncursor C1 is\n  select param_value\n  from SPECIAL_PARAMS\n  where param_name = v_parameter;  \nBEGIN\n    v_parameter := 'SPINCAL_BRES_FLAG';\n  open C1;\n  fetch C1 into :parameter.SPINCAL_BRES_FLAG;\n  close C1;\n  \n  \n    v_parameter := 'DUMMY_ACTIVITY';\n  open C1;\n  fetch C1 into :parameter.DUMMY_ACTIVITY;\n  close C1;\n  \n   v_parameter := 'CRM_UPDATE';\n  open C1;\n  fetch C1 into :parameter.CRM_UPDATE;\n  close C1;\n  \n  v_parameter := 'SMS_REMAINDER';\n  open C1;\n  fetch C1 into :parameter.SMS_REMAINDER;\n  close C1;\n  \n    if nvl(:parameter.CRM_UPDATE,'0') = '0' then \n  \tset_item_property('TELME_REMAINDER_FLAG', visible, property_false);\n  end if;\n  \n  \n  if nvl(:parameter.CRM_UPDATE,'N') = 'N' then \n  \tset_block_property('CRM', update_allowed, property_false);\n  end if;\nEND;\n\n"
    },
    {
      "name": "CHECK_DUPLICATED_ITEMS",
      "type": "Procedure",
      "code": "PROCEDURE check_duplicated_items IS\n  v_row_num number;\nBEGIN \n  go_block('BOOKING_ACTIVITY');\n  first_record;\n  loop\n    v_row_num := to_number(:system.cursor_record);\n    if :system.last_record='TRUE' then\n      exit;\n    else\n      check_record(:booking_activity.activity_code,v_row_num);         \n      go_record(v_row_num + 1);\n    end if;  \n  end loop;\nEND;"
    },
    {
      "name": "CHECK_RECORD",
      "type": "Procedure",
      "code": "PROCEDURE check_record (p_kod in varchar2,\n                        p_row in number) IS\n                        \n                \n \nBEGIN \n go_record(p_row+1);\n loop\n\t\n if (:booking_activity.activity_code=p_kod ) then \n \t   errors(728,'e'); \n else  \n \t  if :system.last_record='TRUE' then\n       exit;\n    else\n      next_record;\n    end if;\n end if;\n end loop;\nEND;"
    },
    {
      "name": "LO_CHECK_BRES_NEW",
      "type": "Procedure",
      "code": "PROCEDURE lo_check_bres_new IS\n x number;\n L_AL_BUT number;\nBEGIN\n\t  x:=lo_check_bres;\n\t  if x<0 then \n   \tset_alert_property('AL_NOTE_3A',alert_message_text,'��� ������ ������ ? ');\n    L_AL_BUT  := show_alert('AL_NOTE_3A');\n    if L_AL_BUT = alert_button2  then  \n    \tnull; \n    elsif L_AL_BUT = alert_button1  then   \n    \tlo_check_bres_new;\n    elsif L_AL_BUT = alert_button3  then  \n    \traise form_trigger_failure;\n    end if;\n    end if;\nEND;"
    },
    {
      "name": "SET_PROPERTIES",
      "type": "Procedure",
      "code": " PROCEDURE set_properties (IN_FIELD     IN VARCHAR2,\n                          IN_PROPERTY  IN VARCHAR2) IS\nBEGIN\n  if IN_PROPERTY = 'TRUE' then\n  \tset_item_property(IN_FIELD,enabled,property_true);\n\t  set_item_property(IN_FIELD,navigable,property_true);\n\t  set_item_property(IN_FIELD,insert_allowed,property_true);\n\t  set_item_property(IN_FIELD,update_allowed,property_true);\n  else\n  \tset_item_property(IN_FIELD,enabled,property_false);\n  end if;\nEND;\n"
    },
    {
      "name": "GET_REFER",
      "type": "Procedure",
      "code": "PROCEDURE get_refer (ERR_HANDLING  IN  varchar2)IS\n         cursor C1 is\n\t\tselect c_name\n    From CLIENT\n    where c_type = 82\n    and   c_status = '�'\n    and   client_no = :booking.pf_refer_code;\n    \n         cursor C2 is\n    select s_name\n    from SUPPLIERS\n    where s_type = '�'\n    and supplier_no = :booking.pf_refer_code;\n    \n         cursor C3 is\n    select p_name || ' ' || p_first_name \n    from ALL_PERSONAL\n    where nvl(p_status,'�') in ('�','�')\n    and emp_no = :booking.pf_refer_code;\n    \n        cursor C4_0 is\n    select code,code_desc \n    from CODES\n    where tab_no = 386 and code is not null\n    and exists (select '1' from codes_connect_lines\n                where connect_no = 108\n                and code = ccl_code1\n                and ccl_code2 = :booking.pf_refer_code);\n\n    \n         cursor C4 is\n    select code_desc \n    from CODES \n    where tab_no = 177 and code is not null \n    and exists (select '1' from codes_connect_lines \n                where connect_no = 108 \n                and ccl_code2 = code \n                and ccl_code1 = :booking.refer_code)\n    and code = :booking.pf_refer_code; \n    \n         cursor C5 is\n    select code_desc \n    from CODES \n    where tab_no = 177 and code is not null \n    and exists (select '1' from codes_connect_lines \n                where connect_no = 107 \n                and ccl_code2 = code \n                and ccl_code1 = :booking.pf_refer_type)\n    and code = :booking.pf_refer_code;\n    \n    dummy_c     varchar2(80);\n    dummy_n     number(38);\n    dummy_d     date;\n    first_name  varchar2(80);\n    last_name   varchar2(80);\n    ERR_HAND    varchar2(2);\nBEGIN\n\tERR_HAND  :=  lower(substr(ERR_HANDLING, 1, 1));\n\tif :booking.pf_refer_type = '1' then\n\t\topen C1;\n\t\tFetch C1 into :booking.pf_refer_desc;\n\t\tif C1%NOTFOUND then\n\t\t\terrors(644,ERR_HAND);\n\t\tend if;\n\t\tclose C1;\n\telsif :booking.pf_refer_type = '2' then\n\t\topen C2;\n\t\tFetch C2 into :booking.pf_refer_desc;\n\t\tif C2%NOTFOUND then\n\t\t\terrors(1215,ERR_HAND);\n\t\tend if;\n\t\tclose C2;\t\t\n\telsif :booking.pf_refer_type = '3' then\n\t\topen C3;\n\t\tFetch C3 into :booking.pf_refer_desc;\n\t\tif C3%NOTFOUND then\n\t\t\terrors(2094,ERR_HAND);\n\t\tend if;\n\t\tclose C3;\t\n\telsif :booking.pf_refer_type = '4' then\n\t  if :booking.refer_code is null and :booking.pf_refer_code is not null then\n\t  \topen C4_0;\n\t  \tFetch C4_0 into :booking.refer_code,:booking.refer_desc;\n\t  \tif C4_0%NOTFOUND then\n\t  \t\terrors(3714,'ERR_HAND');\n\t  \tend if;\n\t  \tclose C4_0;\n\t  end if;\t\t\n\t\topen C4;\n\t\tFetch C4 into :booking.pf_refer_desc;\n\t\tif C4%NOTFOUND then\n\t\t\terrors(3715,ERR_HAND);\n\t\tend if;\n\t\tclose C4;\t\t\n\telsif :booking.pf_refer_type = '6' then\n\t\tget_patient_data (:booking.pf_refer_code,dummy_c,\n\t                    dummy_c,last_name,first_name,dummy_c,dummy_d,dummy_c,\n\t \t                  dummy_c,dummy_c,dummy_c,dummy_c,dummy_n,dummy_c,\n\t                    dummy_c,dummy_c,dummy_c,dummy_c,dummy_c,dummy_c,dummy_c,dummy_d,\n\t                    dummy_c,dummy_c,dummy_c,dummy_c,dummy_c,dummy_c,dummy_c,dummy_c,ERR_HAND);\n\t                     \n\t  :booking.pf_refer_desc := first_name || ' ' || last_name;                 \n  else -- rachel --if :booking.pf_refer_type = '5' then\n\t\topen C5;\n  \tFetch C5 into :booking.pf_refer_desc;\n\t\tif C5%NOTFOUND and get_item_property('booking.PF_REFER_CODE',visual_attribute) not like '%RED%' then\n\t\t\terrors(490,ERR_HAND);\n\t\tend if;\n\t\tclose C5;\t\t\n  end if;\nEND;"
    },
    {
      "name": "GET_PATIENT_DATA",
      "type": "Procedure",
      "code": "PROCEDURE get_patient_data (IN_PATIENT      IN number,\n                            OUT_ID_TYPE     IN OUT varchar2,\n                            OUT_ID          IN OUT varchar2,\n                            OUT_NAME        IN OUT varchar2,\n                            OUT_FIRST_NAME  IN OUT varchar2,\n                            OUT_FATHER_NAME IN OUT varchar2,\n                            OUT_BDATE       IN OUT date,\n                            OUT_SEX         IN OUT varchar2,\n                            OUT_HTEL        IN OUT varchar2,\n                            OUT_WTEL        IN OUT varchar,\n                            OUT_CELL        IN OUT varchar2,\n                            OUT_STATE       IN OUT varchar2,\n                            OUT_CITY_NO     IN OUT number,                           \n                            OUT_CITY_NAME   IN OUT varchar2,\n                            OUT_STREET      IN OUT varchar2,\n                            OUT_STREETNO    IN OUT varchar2,\n                            OUT_ZIP         IN OUT varchar2,\n                            OUT_P_CARD      IN OUT varchar2,\n                            OUT_P_STATUS    IN OUT varchar2,\n                            OUT_P_ACC       IN OUT varchar2,\n                            OUT_P_REM       IN OUT varchar2,\n                            OUT_DATE_INSERT IN OUT DATE,\n                            OUT_P_REASON    IN OUT varchar2, \n                            OUT_P_SICK_FUND IN OUT varchar2,\n                            OUT_P_FUND_CARD IN OUT varchar2,\n                            OUT_INSUR_FLAG  IN OUT varchar2,\n                            OUT_INSUR_CODE  IN OUT varchar2, \n                            OUT_OPER_CODE   IN OUT varchar2,\n                            OUT_VAT         IN OUT varchar2,\n                            OUT_INCL_NOW    IN OUT varchar2,\n                            ERR_HANDLING    IN     varchar2) IS\n  cursor C1 is\n  select p_id_type,p_id,p_last_name,p_first_name,p_father_name,p_bdate,\n         p_sex,p_htel,p_wtel,dbg_sms.clean_cellnumber(p_cell) p_cell,\n         p_state,city_no,p_city_name,p_street,p_streetno,p_zip,p_credit_card,p_status,\n         p_acc_code,p_remark,date_insert,p_reason,p_sick_fund,p_fund_card,\n         p_insurance_flag,p_insurance_code,p_oper_code,p_vat,p_incl_now\n  from PATIENT\n  where patient_no = IN_PATIENT;\n\n  ERR_HAND VARCHAR2(1);\n  dummy_d    date;\nBEGIN\n\t\n\tERR_HAND  :=  lower(substr(ERR_HANDLING, 1, 1));\n\n  open C1;\n  Fetch C1 into OUT_ID_TYPE,OUT_ID,OUT_NAME,OUT_FIRST_NAME,OUT_FATHER_NAME,OUT_BDATE,\n                OUT_SEX,\n                OUT_HTEL,OUT_WTEL,OUT_CELL,OUT_STATE,OUT_CITY_NO,OUT_CITY_NAME,\n                OUT_STREET,OUT_STREETNO,OUT_ZIP,OUT_P_CARD,OUT_P_STATUS,OUT_P_ACC,OUT_P_REM,\n                OUT_DATE_INSERT,OUT_P_REASON,OUT_P_SICK_FUND,OUT_P_FUND_CARD,\n                OUT_INSUR_FLAG,OUT_INSUR_CODE,OUT_OPER_CODE,OUT_VAT,OUT_INCL_NOW;\n                 \n  \n  if C1%NOTFOUND then\n  \tif ERR_HAND != 'n' then\n      errors(3716,ERR_HAND);\n    end if;\n  end if;\n  close C1;\nEND;"
    },
    {
      "name": "SET_PROP",
      "type": "Procedure",
      "code": "PROCEDURE set_prop IS\nBEGIN\n\n\n  if :booking.pf_refer_type is not null then\n  \tset_properties('booking.PF_REFER_CODE','TRUE');\n\t\tset_properties('booking.PF_REFER_DESC','TRUE');\n\t\tset_item_property('booking.PF_REFER_CODE',visual_attribute,'VA_ITEM_MANDATORY');\n\n\t  --if :booking.pf_refer_type in ('1','2','3','5','6') then rachel\n\t  if :booking.pf_refer_type not in ('4') then\n\t\t  set_item_property('booking.REFER_CODE',visible,property_false);\n\t\t  set_item_property('booking.REFER_DESC',visible,property_false);\n\t\t  set_item_property('booking.REFER_CODE_LOV',visible,property_false);\n\n\t    if :booking.pf_refer_type = '1' then      -- ����\n        set_item_property('booking.PF_REFER_DESC',lov_name,'LOV_REFER_CODE1');\n\t    elsif :booking.pf_refer_type = '2' then   -- ���\n        set_item_property('booking.PF_REFER_DESC',lov_name,'LOV_REFER_CODE2');\n      elsif :booking.pf_refer_type = '3' then   -- ������\n        set_item_property('booking.PF_REFER_DESC',lov_name,'LOV_REFER_CODE3');\n      elsif :booking.pf_refer_type = '6' then  -- �����\n    \t  set_item_property('booking.PF_REFER_DESC',lov_name,'LOV_REFER_CODE6');\n    \telse --if :booking.pf_refer_type = '5' then --rachel\n    \t  set_item_property('booking.PF_REFER_DESC',lov_name,'LOV_REFER_CODE5');\n      end if;\n    else  -- ���� �����\n      set_item_property('booking.REFER_CODE',visible,property_true);\n      set_properties('booking.REFER_CODE','TRUE');\n    \tset_item_property('booking.REFER_DESC',visible,property_true);\n\t\t  set_item_property('booking.REFER_CODE_LOV',visible,property_true);\n\t\t  set_item_property('booking.REFER_CODE_LOV',enabled,property_true);\n\t\t  set_item_property('booking.REFER_CODE',visual_attribute,'VA_ITEM_MANDATORY');\n      if :booking.refer_code is not null then\n        get_code_info('386',:booking.refer_code,:booking.refer_desc,'WARN');\n      end if;\t\t\n\t\t  set_item_property('booking.PF_REFER_DESC',lov_name,'LOV_REFER_CODE4');\t\n    end if;\n  else\n\t  set_properties('booking.PF_REFER_CODE','FALSE');\n\t  set_properties('booking.PF_REFER_DESC','FALSE');\n    set_item_property('booking.PF_REFER_CODE',visual_attribute,'VA_ITEM');\n  \n    set_item_property('booking.REFER_CODE',visible,property_false);\n\t  set_item_property('booking.REFER_DESC',visible,property_false);\n\t  set_item_property('booking.REFER_CODE_LOV',visible,property_false);\n  end if;\n\nEND;"
    },
    {
      "name": "LO_GET_ORDER_DETAILS",
      "type": "Function",
      "code": "FUNCTION lo_get_order_details RETURN varchar2 IS\nv_activity_code\tbooking_activity.activity_code%type;\nCURSOR Activities IS\n\t\tselect a.activity_code\n    from booking_activity ba, ACTIVITY a\n      where ba.activity_code = :BOOKING_ACTIVITY.activity_code\n        and a.a_type =   '1'; -- ������ �������\n\nBEGIN\n\t\n\tgo_block('BOOKING_ACTIVITY');\n\tfirst_record;\t\n\t\n\tBEGIN\n\tselect a.activity_code\n\t\tINTO v_activity_code\n    from ACTIVITY a\n    where a.activity_code = :BOOKING_ACTIVITY.activity_code\n    and a.a_type =   '1'; -- ������ �������\n\tEXCEPTION\n\t\tWHEN NO_DATA_FOUND THEN\n\t\t\tv_activity_code := null;\n\t\t\tnext_record;\t\t\t\n\tEND;  \n\t\n\treturn v_activity_code;\t\nEND;"
    },
    {
      "name": "LO_DEL_BOOKING_RESOURCES",
      "type": "Procedure",
      "code": "PROCEDURE lo_del_booking_resources IS\n\ncursor c1 is\nselect BOOKING_NO,ACTIVITY_CODE,BR_RESOURCE_TYPE,BR_REQUIRED\nfrom booking_resource\nwhere booking_no = :booking.booking_no\nand activity_code = :booking_activity.activity_code;\n\nx number;\n\nBEGIN\n\t\n select count(*)\n into x\n from  booking_resource\n where booking_no = :booking.booking_no\n  and activity_code = :booking_activity.activity_code\n  and BR_RESOURCE_TYPE ='M'\n  and BR_REQUIRED ='Y';\n  \n  if x = 0 then\n    begin\n    \tupdate \tbooking_resource \n    \tset BR_REQUIRED = null\n     where booking_no = :booking.booking_no\n     and activity_code = :booking_activity.activity_code;\n     \n     local_commit;\n    exception\n    \t when others then null;\n    end;\n  end if;\n  \nEND;"
    },
    {
      "name": "LO_CHECK_EXIT",
      "type": "Procedure",
      "code": "PROCEDURE lo_check_exit  IS\n x number;\n L_AL_BUT number;\n l_old_booking number;\nBEGIN\n\t  x:=lo_check_bres;\n\t  if x<0 then \n   \tset_alert_property('AL_NOTE_3A',alert_message_text,'��� ���� ��� ����� ? ');\n    L_AL_BUT  := show_alert('AL_NOTE_3A');\n    if L_AL_BUT = alert_button2  then  \n    \tl_old_booking:=:booking.booking_no;\t\n       begin\n         delete booking_activity where booking_no = l_old_booking;\n         delete booking_resource where booking_no = l_old_booking;\n         delete booking where booking_no = l_old_booking;\n        local_commit;\t\n       exception\n\t       when others then\n\t          message('error'||sqlerrm);\n       end;\n    elsif L_AL_BUT = alert_button1  then   \n    \tlo_check_exit;\n    elsif L_AL_BUT = alert_button3  then  \n    \traise form_trigger_failure;\n    end if;\n    end if;\nEND;\n"
    }
  ],
  "sql_clauses": [],
  "summary": {
    "total_triggers": 130,
    "total_program_units": 20,
    "total_sql_clauses": 0
  }
}